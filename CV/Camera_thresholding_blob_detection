"""
Live blob detection with OpenCV for ASL Glove CV work.
Captures frames, thresholds bright IR markers, and highlights blobs in real time.
"""

# Suppress linter false positives about cv2 dynamic attributes
# pylint: disable=E1101

import cv2
import numpy as np


def main() -> None:
    """Main loop to capture frames and detect blobs."""

    print("OpenCV version:", cv2.__version__)

    # Open default camera
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    cap.set(cv2.CAP_PROP_FPS, 60)

    if not cap.isOpened():
        print("❌ Error: Could not open camera.")
        return

    # Parameters for blob filtering
    THRESH = 200          # threshold brightness (0–255)
    MIN_AREA = 40         # minimum blob area (px^2)
    MAX_AREA = 2000       # maximum blob area (px^2)
    MIN_CIRCULARITY = 0.8 # how round blobs must be (0–1)

    kernel = np.ones((3, 3), np.uint8)

    while True:
        ret, frame = cap.read()
        if not ret:
            print("❌ Error: Failed to grab frame.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, (5, 5), 0)

        # Threshold bright spots
        _, mask = cv2.threshold(blurred, THRESH, 255, cv2.THRESH_BINARY)

        # Clean up small specks
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel, iterations=1)

        # Find blobs as contours
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        centers = []
        for c in contours:
            area = cv2.contourArea(c)
            if area < MIN_AREA or area > MAX_AREA:
                continue

            per = cv2.arcLength(c, True)
            if per <= 0:
                continue

            circularity = 4 * np.pi * area / (per * per + 1e-9)
            if circularity < MIN_CIRCULARITY:
                continue

            M = cv2.moments(c)
            if M["m00"] == 0:
                continue
            cx, cy = int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"])
            centers.append((cx, cy))

            # Draw detection
            (x, y, w, h) = cv2.boundingRect(c)
            r = int(0.5 * (w + h) / 2)
            cv2.circle(frame, (cx, cy), max(r, 6), (0, 255, 0), 2)
            cv2.putText(frame, f"{cx},{cy}", (cx + 6, cy - 6),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1, cv2.LINE_AA)

        # Show views
        cv2.imshow("Threshold Mask", mask)
        cv2.imshow("Detections", blurred)

        # Controls: press + / - to adjust threshold live, q to quit
        k = cv2.waitKey(1) & 0xFF
        if k == ord("q"):
            break
        elif k in (ord("+"), ord("=")):
            THRESH = min(255, THRESH + 2)
            print("Threshold:", THRESH)
        elif k in (ord("-"), ord("_")):
            THRESH = max(0, THRESH - 2)
            print("Threshold:", THRESH)

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()